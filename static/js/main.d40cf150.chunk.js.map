{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","varient","url","fetchData","country","a","ChangeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","FetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FetchedData","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","coranaImage","alt","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d40cf150.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__32uNz\",\"card\":\"Cards_card__BbESP\",\"infected\":\"Cards_infected__1hGj_\",\"recovered\":\"Cards_recovered__1lVXt\",\"deaths\":\"Cards_deaths__3C7D4\"};","import React  from 'react';\r\nimport styles from './Cards.module.css';\r\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards  =  ({data: { confirmed, deaths, recovered, lastUpdate }}) => {\r\n   \r\n    if(!confirmed){\r\n        return 'loading...';\r\n    }\r\n\r\n    return (\r\n         <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                         <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"></CountUp></Typography>\r\n    <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"></CountUp></Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"></CountUp></Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Number of deaths caused by  COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n         </div>\r\n     );\r\n}\r\n\r\nexport default Cards; ","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n     \r\n    let ChangeableUrl = url;\r\n\r\n    if(country){\r\n      ChangeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n        const { data:{confirmed, recovered, deaths, lastUpdate } } = await axios.get(ChangeableUrl);\r\n         return { confirmed, recovered, deaths, lastUpdate };\r\n    }catch(error){\r\n       console.log('Error:'+ error);\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData =  async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map( (dailyData) => ({\r\n          confirmed:dailyData.confirmed.total,\r\n          deaths:dailyData.deaths.total,\r\n          date:dailyData.reportDate\r\n        }));\r\n\r\n        return modifiedData;\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries =  async () =>{\r\n  try{\r\n     const { data:{countries } } = await axios.get(`${url}/countries`);\r\n     return countries.map( (country) => country.name);\r\n  }catch(error){\r\n      console.log(error);\r\n  }\r\n}","import React,{ useState, useEffect }  from 'react';\r\nimport { fetchDailyData }  from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart  =  ({data:{ confirmed, deaths, recovered },country}) => {\r\n    \r\n    const [dailyData, setDailyData] =  useState([]);\r\n\r\n    useEffect( () => {\r\n        const FetchApi =  async () =>{\r\n           setDailyData( await fetchDailyData() );\r\n        };\r\n        FetchApi();\r\n    },[]);\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?\r\n        <Line \r\n           data={{\r\n               labels:dailyData.map( ({date}) => date),\r\n               datasets:[\r\n                   {\r\n                       data:dailyData.map(({confirmed}) => confirmed),\r\n                       label:'Infected',\r\n                       borderColor:'#3333ff',\r\n                       fill:true\r\n                   },{\r\n                    data:dailyData.map(({deaths}) => deaths),\r\n                    label:'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true\r\n                }\r\n               ]\r\n           }}\r\n          />\r\n        :null\r\n    );\r\n\r\n    const BarChart = (\r\n        confirmed\r\n        ? (\r\n        <Bar\r\n             data={{\r\n                labels:['Infected', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    label:'Purple',\r\n                    backgroundColor:[\r\n                        'rgba(0,0,255,0.5)',\r\n                        'rgba(0,255,0,0.5)',\r\n                        'rgba(255,0,0,0.5)',\r\n                    ],\r\n                    data:[confirmed.value ,recovered.value, deaths.value]\r\n                }]\r\n             }}\r\n             options={{\r\n                 legend:{display:false},\r\n                 title:{display:true,text:`Current State in ${country}`}\r\n             }}\r\n         />\r\n         ) :null\r\n    );\r\n   \r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? BarChart : lineChart }\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Chart; ","import React,{ useState, useEffect }  from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker  =  ({ handleCountryChange }) => {\r\n    \r\n    const[fetchedCountries,setFetchedCountries] = useState([]);\r\n\r\n    useEffect( () =>{\r\n        const FetchedData = async () => {\r\n            setFetchedCountries( await fetchCountries() );\r\n        }\r\n\r\n        FetchedData();  \r\n    },[setFetchedCountries]);\r\n\r\n    // console.log(fetchedCountries);\r\n\r\n    return (\r\n       <div>\r\n           <FormControl className={styles.formControl}>\r\n                  <NativeSelect default=\"\" onChange={(e) => handleCountryChange(e.target.value)}> \r\n                      <option value=\"\">Global</option>\r\n                      {fetchedCountries.map((country, i) => <option value={country} key={i}>{country}</option>)}\r\n                  </NativeSelect>\r\n           </FormControl>\r\n       </div>\r\n     );\r\n}\r\n\r\nexport default CountryPicker; \r\n","import React, { Component } from 'react';\n\nimport { Cards, Chart, CountryPicker } from './Components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nimport coranaImage from './images/image.png';\n\n\nclass App extends Component {\n\n  state = {\n    data:[],\n    country:'',\n  }\n\n   async componentDidMount(){\n    const fetchedData =  await fetchData();\n    this.setState({ data:fetchedData });\n  }\n\n   handleCountryChange =  async (country) => {\n      const fetchedData = await fetchData(country);\n       this.setState({data:fetchedData,country:country });\n   }  \n\n  render(){\n    const { data,country } = this.state;\n    return (\n        <div className={styles.container}>\n          <img src={coranaImage} alt=\"COVID 19 \" className={styles.image} />\n           <Cards data={data} />\n           <CountryPicker handleCountryChange={this.handleCountryChange } />\n           <Chart data={data} country={country}   />  \n        </div>\n    )\n  }\n}\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__13Z7v\",\"image\":\"App_image__2qTPx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__lp1hu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2OlfT\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}